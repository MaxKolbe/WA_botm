.env 
node_modules 


// export const botRequests = async (req, res) => {
//   try {
//     const settings = await settingsModel.findOne()
//     const message = req.body.Body?.trim().toUpperCase()
//     const sender = req.body.From.trim()
//     // console.log("sender is", sender)
//     // Check if user exists
//     const user = await employeeModel.findOne({ phone: sender }).readConcern('majority')
//     const otpElement = await otpModel.findOne({ phrase: message })

//     if (!user) {
//       return res.send(`<Response><Message>No such employee found. Access denied.</Message></Response>`)
//     }

//     if(user.firsttime === true && !otpElement ){
//       res.send(`
// <Response>
//     <Message> 
// Hi there ðŸ‘‹ 

// Welcome to NenBot! Here's how it works: 

// Please enter a *phrase* to receive your one-time password (OTP). 

// You can request up to 3 OTPs. After that, you'll need to wait for a period of time before trying again.  

// If you message NenBot and you don't get a reply within a minute (Nenbot is NOT disabled or You have NOT reached YOUR usage limits), please resend your message to make sure it goes through.  
//     </Message>
// </Response>`)

//       user.firsttime = false
//       await user.save()
      
//       setTimeout(async () => { 
//         user.firsttime = true
//         await user.save()
//         console.log(`[BOT] Auto-reset attempts for ${user.name}`)
//       }, 24 *60 * 60 * 1000) // 24 hours
//       return
//     }

//     if (user.queried === true) {
//       console.log("secret message to let you know bot got disabled")
//        setTimeout(async () => { 
//         user.queried = false
//         await user.save()
//         console.log(`[BOT] Auto-reset attempts for ${user.name}`)
//       }, 15 * 60 * 1000) // 15 mins
//       return
//     }

//      // Check bot enabled/disabled status
//     if (settings && !settings.botEnabled) {
//       user.queried = true
//       await user.save()
//       return res.send(`<Response><Message>The bot is currently disabled. Please try again later.</Message></Response>`)
//     } 
    
//     // Check if user is enabled or blocked due to attempts
//     // Might be redundant. Check later
//     // if (!user.enabled) {
//     //   return res.send(`<Response><Message>You have exceeded the maximum attempts. Please wait 2 minutes before trying again.</Message></Response>`)
//     // }

//     // If attempts now exceed 2, disable and set reset timer
//     if (user.attempts > 2) {
//       user.enabled = false
//       await user.save()

//       setTimeout(async () => {
//         user.attempts = 0
//         user.enabled = true
//         await user.save()
//         console.log(`[BOT] Reset attempts for ${user.name}`)
//       }, 2 * 60 * 1000) // 2 mins

//       return res.send(`<Response><Message>You have exceeded the maximum attempts. Try again in 2 minutes.</Message></Response>`)
//     }

//     // Check if phrase exists
//     if (!otpElement) {
//       // Increment attempts on invalid phrase
//       console.log("no otp found")
//       user.attempts += 1
//       await user.save()
//       return res.send(`<Response><Message>Invalid phrase. Please send a valid phrase to receive an otp.</Message></Response>`)
//     }


//     // Valid phrase: Generate code
//     const code = generateCode(otpElement.secret)
//     console.log(`[BOT] Sending code to ${user.name}: ${code}`)
//     sendAuthCode(user.name, sender, code)

//     // Increment attempts
//     user.attempts += 1
//     await user.save()

//     // 7. Start a reset timer so attempts reset even if user doesn't try again
//     setTimeout(async () => { 
//       user.attempts = 0
//       await user.save()
//       console.log(`[BOT] Auto-reset attempts for ${user.name}`)
//     }, 5 * 60 * 1000) // 5 mins

//     return

//   } catch (err) {
//     console.error(err)
//     return res.send(`<Response><Message>An error occurred. Please try again later.</Message></Response>`)
//   }
// }

// export const test = async (req, res) => {
// try{
 
// }catch(err){
//    console.error(err)
// }
// }
